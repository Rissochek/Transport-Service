basePath: /api/v1
definitions:
  model.Order:
    properties:
      createdAt:
        type: string
      finishedAt:
        type: string
      name:
        type: string
      orderId:
        type: integer
      status:
        type: string
      userId:
        type: integer
    type: object
  model.User:
    properties:
      orders:
        items:
          $ref: '#/definitions/model.Order'
        type: array
      userId:
        type: integer
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Это пример сервера Swagger.
  title: Swagger Example API
  version: "1.0"
paths:
  /login:
    get:
      consumes:
      - application/json
      description: Auth in system with username and password
      parameters:
      - description: Username
        in: query
        name: username
        required: true
        type: string
      - description: Password
        in: query
        name: password
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: JWT token
          schema:
            type: string
        "401":
          description: Uncorrect password
        "404":
          description: User not found
      summary: Auth in system
      tags:
      - auth
  /orders:
    post:
      consumes:
      - application/json
      description: Create a new order in the system
      parameters:
      - description: OrderId
        in: query
        name: OrderId
        required: true
        type: integer
      - description: Order name
        in: query
        name: Name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Order'
        "400":
          description: enter correct UserId and OrderId
        "401":
          description: Unauthorized
        "404":
          description: order was not created
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - orders
  /orders/{OrderId}:
    delete:
      consumes:
      - application/json
      description: Deleting order from db according to ID
      parameters:
      - description: Order ID
        in: path
        name: OrderId
        required: true
        type: integer
      responses:
        "200":
          description: Order deleted
        "401":
          description: Unauthorized
        "404":
          description: Order not found
      security:
      - BearerAuth: []
      summary: Delete an order by ID
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Get details of a order by ID
      parameters:
      - description: Order ID
        in: path
        name: OrderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Order'
        "401":
          description: Unauthorized
        "404":
          description: order not found
      security:
      - BearerAuth: []
      summary: Get an order by ID
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Can update status of order by id
      parameters:
      - description: Order ID
        in: path
        name: OrderId
        required: true
        type: integer
      - description: Status
        in: query
        name: Status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Order'
        "401":
          description: Unauthorized
        "404":
          description: order not found
        "500":
          description: internal server error
      security:
      - BearerAuth: []
      summary: Updates status of order
      tags:
      - orders
  /users:
    get:
      consumes:
      - application/json
      description: Get details of a user by ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "401":
          description: Unauthorized
        "404":
          description: user not found
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user in the system
      parameters:
      - description: UserId
        in: query
        name: UserId
        required: true
        type: integer
      - description: Username
        in: query
        name: Username
        required: true
        type: string
      - description: Password
        in: query
        name: Password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: enter correct UserId
        "404":
          description: user was not created
      summary: Create a new user
      tags:
      - users
  /users/{UserId}:
    delete:
      consumes:
      - application/json
      description: Deleting user from db according to ID
      responses:
        "200":
          description: User deleted
        "401":
          description: Unauthorized
        "404":
          description: User not found
      security:
      - BearerAuth: []
      summary: Delete a user by ID
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
